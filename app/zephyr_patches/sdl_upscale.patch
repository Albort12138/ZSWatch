diff --git a/drivers/display/display_sdl.c b/drivers/display/display_sdl.c
index f70613a34c..def7ab256b 100644
--- a/drivers/display/display_sdl.c
+++ b/drivers/display/display_sdl.c
@@ -56,8 +56,8 @@ static int sdl_display_init(const struct device *dev)
 
 	disp_data->window =
 	    SDL_CreateWindow("Zephyr Display", SDL_WINDOWPOS_UNDEFINED,
-			     SDL_WINDOWPOS_UNDEFINED, config->width,
-			     config->height, SDL_WINDOW_SHOWN);
+			     SDL_WINDOWPOS_UNDEFINED, config->width * 4,
+			     config->height * 4, SDL_WINDOW_SHOWN);
 	if (disp_data->window == NULL) {
 		LOG_ERR("Failed to create SDL window: %s", SDL_GetError());
 		return -EIO;
@@ -71,6 +71,7 @@ static int sdl_display_init(const struct device *dev)
 		return -EIO;
 	}
 
+	SDL_RenderSetLogicalSize(disp_data->renderer, config->width, config->height);
 	disp_data->texture = SDL_CreateTexture(
 	    disp_data->renderer, SDL_PIXELFORMAT_ARGB8888,
 	    SDL_TEXTUREACCESS_STATIC, config->width,
diff --git a/drivers/kscan/kscan_sdl.c b/drivers/kscan/kscan_sdl.c
index c00a0a5e10..df82d87428 100644
--- a/drivers/kscan/kscan_sdl.c
+++ b/drivers/kscan/kscan_sdl.c
@@ -22,34 +22,42 @@ struct sdl_data {
 static int sdl_filter(void *arg, SDL_Event *event)
 {
 	struct sdl_data *data = arg;
-	uint32_t row = 0;
-	uint32_t column = 0;
+	float row = 0;
+	float column = 0;
 	bool pressed = 0;
+	SDL_Window* window;
+	SDL_Renderer* renderer;
 
 	switch (event->type) {
 	case SDL_MOUSEBUTTONDOWN: {
 		pressed = 1;
-		column = event->button.x;
-		row = event->button.y;
 	} break;
 	case SDL_MOUSEBUTTONUP: {
 		pressed = 0;
-		column = event->button.x;
-		row = event->button.y;
 	} break;
 	case SDL_MOUSEMOTION: {
 		if (!event->motion.state)
 			break;
 		pressed = 1;
-		column = event->button.x;
-		row = event->button.y;
 	} break;
 	default:
 		return 1;
 	}
 
+	window = SDL_GetWindowFromID(event->window.windowID);
+	if (!window) {
+		return 1;
+	}
+
+	renderer = SDL_GetRenderer(window);
+	if (!renderer) {
+		return 1;
+	}
+
+	SDL_RenderWindowToLogical(renderer, event->button.x, event->button.y, &column, &row);
+
 	if (data->enabled && data->callback) {
-		data->callback(data->dev, row, column, pressed);
+		data->callback(data->dev, (uint32_t)row, (uint32_t)column, pressed);
 	}
 	return 1;
 }
